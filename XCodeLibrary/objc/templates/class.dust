/**
 * {typePrefix}{packedName}.m
 *
 * DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED AND SHOULD NOT BE CHECKED IN.
 * {@sourceDocument/}
 *
 * {copyright}
 */
#import "{languageSettings.basenames.importAll}{languageSettings.extensions.importAll}"
#import "PPManticoreEngine.h"
#import "PPManticoreNativeInterface.h"
#import "PPManticoreError.h"

{#callbacks}typedef {?returns}JSValue*{:else}void{/returns} (^{typePrefix}{@firstCap}{name}{/firstCap}WrapperBlock)({#args}JSValue*{@sep}, {/sep}{/args});
{typePrefix}{@firstCap}{name}{/firstCap}WrapperBlock {typePrefix}{packedName}_wrap_{name}_callback({typePrefix}{type}{@firstCap}{name}{/firstCap}Handler callback) {
    return ^({#args}JSValue *{name}{@sep}, {/sep}{/args}) {
        {?returns}{@type}{returns.type}{/type} retVal = {/returns}callback({#args}{>toNative target="{type}" arg="{name}"/}{@sep}, {/sep}{/args});{?returns}
        return {>toJs target="{returns.type}" arg="retVal"/};
        {/returns}
    };
}{/callbacks}{constructor}
@implementation {typePrefix}{packedName}

{^inherits}
- (instancetype _Nullable)initFromJavascript:(JSValue* _Nonnull)value {
  if ((self = [super init])) {
    self.impl = value;
  }
  return self;
}
{/inherits}

+ (Class)nativeClassForObject:(JSValue*)value {
  if (value.isNull || value.isUndefined) {
    return self;
  }
  JSValue *nativeClass = value[@"_native"];
  if (nativeClass.isNull || nativeClass.isUndefined) {
    return self;
  }
  {?subclasses}NSString *nativeStr = [nativeClass toString];
{#subclasses}
  if ([@"{name}" isEqualToString:nativeStr]) {
    return [{@type noPointers="true"}{name}{/type} class];
  }
{/subclasses}{/subclasses}
  return self;
}

{#instanceConstructor}- (instancetype _Nullable)init{?args}With{/args}{#args}{@eq key=$idx value=0}{@firstCap}{name}{/firstCap}{:else}{name}{/eq}:({@type}{type}{/type}){name} {/args} {
  if ((self = [super init])) {
    NSArray *args = nil;
{#args}    {@first}args = @[
{/first}{>toJs target="{type}" arg="{name}"/}{@isCallback type="{type}"}{:else} ?: [NSNull null]{/isCallback}{@sep},
{/sep}{@last}
    ];{/last}{/args}
    self.impl = [[{typePrefix}{packedName} engine] createJSObject:@"{name}" withArguments:args];
  }
  return self;
}
{:else}- (instancetype _Nullable)init {
  if ((self = [super init])) {
    self.impl = [[{typePrefix}{packedName} engine] createJSObject:@"{name}" withArguments:nil];
  }
  return self;
}{/instanceConstructor}

{#methods}{>method/}{/methods}
{#staticMethods className=name}{>method isStatic="true"/}{/staticMethods}

{#fields}
-({@type}{type}{/type}){name} {
  return {>toNative target="{type}" arg="self.impl[@\"{name}\"]"/};
}

{^readonly}-(void)set{@firstCap}{name}{/firstCap}:({@type}{type}{/type}){name} {
  self.impl[@"{name}"] = {>toJs target="{type}" arg="{name}"/};
}{/readonly}
{/fields}{#events}
-({typePrefix}{type}{@firstCap}{name}{/firstCap}Signal)add{@firstCap}{name}{/firstCap}Listener:({typePrefix}{type}{@firstCap}{name}{/firstCap}Event)listener {

  void (^delegateHandler)({#args}JSValue*{@sep}, {/sep}{/args}) = ^({#args}JSValue *{name}{@sep}, {/sep}{/args}) {
    listener({#args}{>toNative target="{type}" arg="{name}"/}{@sep}, {/sep}{/args});
  };
  __block PPManticoreEventHolder *eventHolder = [[PPManticoreEventHolder alloc] init];
  eventHolder.block = delegateHandler;

  [self.impl invokeMethod:@"on" withArguments:@[
    @"{name}",
    eventHolder.block
  ]];
  return eventHolder;
}

-(void)remove{@firstCap}{name}{/firstCap}Listener:({typePrefix}{type}{@firstCap}{name}{/firstCap}Signal)listenerToken {
  NSAssert([listenerToken isKindOfClass:[PPManticoreEventHolder class]], @"You must pass the object you received from add{@firstCap}{name}{/firstCap}Listener in order to remove the listener.");
  if ([listenerToken isKindOfClass:[PPManticoreEventHolder class]]) {
    PPManticoreEventHolder *event = (PPManticoreEventHolder *)listenerToken;
    [self.impl invokeMethod:@"removeListener" withArguments:@[@"{name}",event.block]];
  }
}
{/events}
@end
